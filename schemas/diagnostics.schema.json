{
  "enum": [
    "ambiguity-1",
    "count-down-loop",
    "different-requires",
    "newfield-call",
    "newline-call",
    "await-in-sync",
    "not-yieldable",
    "codestyle-check",
    "spell-check",
    "duplicate-index",
    "duplicate-set-field",
    "global-in-nil-env",
    "lowercase-global",
    "undefined-env-child",
    "undefined-global",
    "cast-type-mismatch",
    "circle-doc-class",
    "doc-field-no-class",
    "duplicate-doc-alias",
    "duplicate-doc-field",
    "duplicate-doc-param",
    "undefined-doc-class",
    "undefined-doc-name",
    "undefined-doc-param",
    "unknown-cast-variable",
    "unknown-diag-code",
    "unknown-operator",
    "redefined-local",
    "close-non-object",
    "deprecated",
    "discard-returns",
    "no-unknown",
    "assign-type-mismatch",
    "cast-local-type",
    "need-check-nil",
    "param-type-mismatch",
    "return-type-mismatch",
    "undefined-field",
    "missing-parameter",
    "missing-return",
    "missing-return-value",
    "redundant-parameter",
    "redundant-return-value",
    "redundant-value",
    "unbalanced-assignments",
    "code-after-break",
    "empty-block",
    "redundant-return",
    "trailing-space",
    "unreachable-code",
    "unused-function",
    "unused-label",
    "unused-local",
    "unused-vararg"
  ],
  "markdownEnumDescriptions": [
    "Triggered when there is an ambiguous statement that may need some brackets in order to correct the order of operations.",
    "Triggers when a for loop will never reach its max/limit because it is incrementing when it should be decrementing.",
    "Triggered when a file is required under two different names. This can happen when requiring a file in two different directories.",
    "Triggered when calling a function across two lines from within a table. This may be unwanted and you may want to separate the fields with a comma (,) or semicolon (;) - unless you want to call the first field as a function.",
    "Triggered when calling a function from the next line. This may be unintended and you may want to add a semicolon `;` to end the line.",
    "Triggered when calling an asynchronous function from within a synchronous function.",
    "Triggered when attempting to call `coroutine.yield()` when it is not permitted.",
    "Triggered when the opinionated style checking detects an incorrectly styled line.",
    "Triggered when a typo is detected in a string. The dictionary can be customized using the [`Lua.spell.dict` setting](https://github.com/sumneko/lua-language-server/wiki/Settings#spelldict).",
    "Triggered when there are duplicate indexes.",
    "Triggered when setting the same field in a class more than once. Check the names of your fields.",
    "Triggered when a global variable is defined and the environment (`_ENV`) is `nil`.",
    "Triggered when a global variable starts with a lowercase character. This is mainly for maintaining good practice.",
    "Triggered when the environment (`_ENV`) is mutated and a previously global variable is no longer usable.",
    "Triggered when referencing an undefined global (assumed to be global). The typical \"does not exist\" warning. Double check that you have spelled things correctly and that the variable exists.",
    "Triggered when casting a variable to a type that does not match its initial type.",
    "Triggered when two classes inherit each other forming a never ending loop of inheritance.",
    "Triggered when a [`@field`](https://github.com/sumneko/lua-language-server/wiki/Annotations#field) is specified for a non-existent [`@class`](https://github.com/sumneko/lua-language-server/wiki/Annotations#class).",
    "Triggered when there are two [`@alias`](https://github.com/sumneko/lua-language-server/wiki/Annotations#alias) annotations with matching names.",
    "Triggered when there are two [`@field`](https://github.com/sumneko/lua-language-server/wiki/Annotations#field) annotations with matching key values.",
    "Triggered when there are two [`@param`](https://github.com/sumneko/lua-language-server/wiki/Annotations#param) annotations with matching names.",
    "Triggered when referencing an undefined class in a [`@class`](https://github.com/sumneko/lua-language-server/wiki/Annotations#class) annotation.",
    "Triggered when referencing an undefined type or [`@alias`](https://github.com/sumneko/lua-language-server/wiki/Annotations#alias) in a [`@type`](https://github.com/sumneko/lua-language-server/wiki/Annotations#type) annotation.",
    "Triggered when referencing an undefined parameter from a function declartion.",
    "Triggered when attempting to cast an undefined variable. Double check that you have spelled things correctly and that the variable exists. Appears when using [`@cast`](https://github.com/sumneko/lua-language-server/wiki/Annotations#cast).",
    "Triggered when entering an invalid diagnostic code. A diagnostic code is like one of the many diagnosis codes found on this page.",
    "Triggered when an unknown operator is found like `**`.",
    "Triggered when a local variable is being redefined. This will result in the redefinition being underlined. While still legal, it could cause confusion when trying to use the previously defined version of the local variable that may have since been mutated. It is good practice not to re-use local variable names for this reason.",
    "Triggered when attempting to [close a variable](https://www.lua.org/manual/5.4/manual.html#3.3.8) with a non-object. The value of the variable must be an object with the __close metamethod (a Lua 5.4 feature).",
    "Triggered when a variable has been marked as deprecated yet is still being used. The variable in question will also be ~struck through~.",
    "Triggered when the returns of a function are being ignored when it is not permitted. Functions can specify that their returns cannot be ignored with [`@nodiscard`](https://github.com/sumneko/lua-language-server/wiki/Annotations#nodiscard).",
    "Triggered when a variable has an unknown type that cannot be inferred. Useful for more strict typing.",
    "Triggered when assigning a value, in which its type does not match the type of the variable it is being assigned to.",
    "Triggered when a local variable is being cast to a different value than it was defined as.",
    "Triggered when indexing a possibly `nil` object. Serves as a reminder to confirm the object is not nil before indexing - which would throw an error on execution.",
    "Triggered when the type of the provided parameter does not match the type requested by the function definition. Uses information defined with [`@param`](https://github.com/sumneko/lua-language-server/wiki/Annotations#param).",
    "Triggered when the provided `return` value is not of the same type that the function expected.",
    "Triggered when referencing an undefined field.",
    "Triggered when a required parameter is not supplied when calling a function. Uses information defined with [`@param`](https://github.com/sumneko/lua-language-server/wiki/Annotation#param).",
    "Triggered when a required return is not supplied from within a function. Uses information defined with [`@return.`](https://github.com/sumneko/lua-language-server/wiki/Annotations#return).",
    "Triggered when a return is specified but the return value is not. Uses information defined with [`@return`](https://github.com/sumneko/lua-language-server/wiki/Annotations#return).",
    "Triggered when providing an extra parameter that a function does not ask for. Uses information defined with [`@param`](https://github.com/sumneko/lua-language-server/wiki/Annotation#param).",
    "Triggered when a return is returning an extra value that the function has not requested. Uses information defined with [`@return`](https://github.com/sumneko/lua-language-server/wiki/Annotations#return).",
    "Triggered when providing an extra value to an assignment operation that will go unused.",
    "Triggered when there are more variables being assigned than values to assign them.",
    "Triggered when unreachable code is added after a `break` in a loop. This will result in the affected code becoming slightly transparent.",
    "Triggered when a code block is left empty. This will result in the code block becoming slightly transparent.",
    "Triggered when placing a `return` that is not needed as the function would exit on its own.",
    "Triggered when a trailing space is detected. This will result in the trailing space being underlined.",
    "Triggered when a section of code can never be reached. This will result in the affected code becoming slightly transparent.",
    "Triggered when a function is defined but never called. This results in the function becoming slightly transparent.",
    "Triggered when a label is defined but never used. This results in the label becoming slightly transparent.",
    "Triggered when a local variable is defined but never referenced. This results in the variable becoming slightly transparent.",
    "Triggered when the variable arguments symbol (`...`) in a function is unused. This results in the symbol becoming slightly transparent."
  ]
}
